# Line length and Python version
line-length = 100
target-version = "py312"

# Enable autofix for all enabled rules (when `--fix` is passed)
fix = true

# Allow imports relative to the "src" and "app" directories
src = ["src"]

# Enable pycodestyle
[lint]
# E: pycodestyle errors
# F: Pyflakes
# I: isort
# W: pycodestyle warnings
# B: flake8-bugbear
# C4: flake8-comprehensions
# UP: pyupgrade
# S: flake8-bandit (security)
# N: pep8-naming
# ANN: flake8-annotations
# D: pydocstyle
# PT: flake8-pytest-style
# RUF: Ruff-specific rules
select = ["E", "F", "I", "W", "B", "C4", "UP", "S", "N", "ANN", "D", "PT", "RUF"]
ignore = [
    "W293",  # blank line contains whitespace
    "E501",  # line too long
    "F401",  # imported but unused
    "W292",  # no newline at end of file
    "ANN001", # Missing type annotation for function argument
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for __init__
    "ANN206", # Missing return type annotation for classmethod
    "ANN401", # Dynamically typed expressions (Any) are disallowed
    "D107",   # Missing docstring in __init__
    "D203",   # one-blank-line-before-class (conflicts with D211)
    "D205",   # 1 blank line required between summary line and description
    "D213",   # multi-line-summary-second-line (conflicts with D212)
    "D415",   # First line should end with a period
    "B904",   # Within an except clause, raise with from
    "F841",   # Local variable assigned but never used
    "S311",   # Standard pseudo-random generators
    "UP035",  # Deprecated typing imports
]

# Allow autofix for all enabled rules (when `--fix` is passed).
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[lint.isort]
known-first-party = ["simulate_uploads", "process_object", "monitor_processing", "performance_test"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[lint.pydocstyle]
convention = "google"

[lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path", "fastapi.Body"]

[lint.per-file-ignores]
"**/tests/**/*.py" = [
    "S101",    # Use of assert
    "S105",    # Possible hardcoded password
    "S108",    # Insecure usage of temporary file
    "B017",    # Assert blind exception
    "PT003",   # Fixture scope implied
    "PT011",   # pytest.raises too broad
    "D103",    # Missing docstring in function
    "D104",    # Missing docstring in package
    "ANN201",  # Missing return type annotation for public function
]
"**/conftest.py" = [
    "ANN201",  # Missing return type annotation for public function
    "D103",    # Missing docstring in function
    "S105",    # Possible hardcoded password
    "PT003",   # Fixture scope implied
]

[format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"
skip-magic-trailing-comma = false
docstring-code-format = true
